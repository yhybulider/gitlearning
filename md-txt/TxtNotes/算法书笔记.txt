//伪代码，递归算法之box里面找钥匙
def look_for_key(main_box)
	pile = main_box.make_a_pile_to_look_through()
	while pile is not empty；
	 box = pile.grab_a_box()
	 for item in box；
		if item.is_a_box()；
		 pile.append(item)
		elif item.is_a_key();
			print "found the key!"
//散列函数——投票排除重复
voted = {}'
def check_voter(name):
if voted.get(name):
	print "kick them out!"
else:
	voted[name] = True
	pile "let them vote!"
// value = voted.get("Tom")

//缓存
cache = {}

def get_page(url):
	if cache.get(url):
		return cache[url]//返回缓存数据
	else:
		date = get_data_from_server(url)
		cache[url] = data//将生成的数据保存到缓存中
		return data

//广度优先搜索算法代码
def search(name):
	search_queue = deque()
	search_queue += graph[name]
	searched = []//这个数组用于记录检查过的人
	while search_queue:
		person = search_queue.popleft()
		if person not in searched://仅当这个人没有检查过才检查
			if person_is_seller(person):
				print person+ " is a mango seller!"
				return True4
			else:
				search_queue += graph[person]
				searched.append(person)//将这个人添加到search数组中，表示标记为检查过
	return False
	
	
search("you")


//狄克斯特拉算法
node = find_lowest_cost_node(costs)//在未处理的节点中找出开销最小的节点
while node is not None://这个while循环在所有节点被处理后结束
	cost = costs[node]
	neighbors = graph[node]
	for n in neighbors.keys()://遍历当前节点的所有邻居
		new_cost = cost + neighbors[n]
		if costs[n] > new_cost://如果经当前节点前往邻居更近
			costs[n] = new_cost//就更新该邻居的开销
			
			parents[n] =node//同时将该邻居的父节点设置为当前节点
	processed.append(node)//将当前节点标记为已经处理过
	node = find_lowest_cost_node(costs)找出接下来要处理的节点，并循环
	/*find_lowest_cost_node函数定义*/
	def find_lowest_cost_node(costs):
		lowest_cost = float("inf")
		lowest_cost_node = None
		for node in costs://遍历所有的节点
			cost = costs[node]
			if cost < lowest_cost and node not in processed://如果当前节点的开销更低而且没有处理过
				lowest_cost = cost//将其视为开销最低的节点
				lowest_cost_node = node
			return lowest_cost_node
			
			
			
//java代码
import java.util.Scanner;
//大小写转换代码
public class new1{
	public static void main(String args[]){
		Scanner scan = new Scanner(System.in);//Scanner对象创建，获取用户的输入
		System.out.println("input a char");
		char c = in.next().charAt(0);
		if(c>='A'&&c<='Z'){
			c+=32;
			System.out.println("upper" + (char)(c-32) + "convert" + c);//这里的大写为了输出原来的字母，所以要减32
		}
		else if(c>='a'&&c<='z'){
			c-=32;
			System.out.println("down" + (char)(c+32)+"convert" +c);//先加32变为原来的小写去输出
		}
		else{
			System.out.println("false!input again")；//一些非法输入就直接提示
		}
	}
}
//