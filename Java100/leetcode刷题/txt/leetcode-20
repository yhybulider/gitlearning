这里用的是用数组代替了栈去做，
执行用时 :0 ms, 在所有 Java 提交中击败了100.00%的用户
内存消耗 :34.1 MB, 在所有 Java 提交中击败了75.78%的用户
//定义一个相同长度的字符串数组  
        char[] stack = new char[s.length()];
		int head = 0;
		for(char c : s.toCharArray()) {
			switch(c) {
				case '{':
				case '[':
				case '(':
					stack[head++] = c;
					break;
				case '}':
					if(head == 0 || stack[--head] != '{') return false;
					break;
				case ')':
                //这里判断头部是否为零也是相当于判断stack是否empty
					if(head == 0 || stack[--head] != '(') return false;
					break;
				case ']':
					if(head == 0 || stack[--head] != '[') return false;
					break;
			}
		}
		return head == 0;
        //优化版本
         char[] stack = new char[s.length()];
        int head = 0;
        
        for (char c: s.toCharArray()) {
            switch (c) {
                case '(': stack[head++] = ')'; break;
                case '{': stack[head++] = '}'; break;
                case '[': stack[head++] = ']'; break;
                //与下面方法二的最后判断else if很像
                default: if (head == 0 || stack[--head] != c) return false; break;
            }
        }
        return head == 0;
//下面是一开始提交的
import java.util.Stack;

/*
 * @lc app=leetcode.cn id=20 lang=java
 *
 * [20] 有效的括号
 */

// @lc code=start
class Solution {
    public boolean isValid(String s) {
        // 直接判断长度进行比较，奇数的就直接报错
        if(s.length()%2 == 1) {
            return false;
        }
        char[] c = s.toCharArray();
        Stack<Character> stack = new Stack<> ();
        for (Character ch : c) {
//方法1
// Your runtime beats 93 % of java submissions
// Your memory usage beats 61 % of java submissions (34.1 MB)
            // if(ch =='{' || ch =='(' || ch == '[') {
            //     stack.push(ch);
            // } else {
            //     if(stack.empty()) {
            //         return false;
            //     }
            //     if( ch == '}' && stack.pop() != '{') {
            //         return false;
            //     }
            //     if( ch == ']' && stack.pop() != '[') {
            //         return false;
            //     }
            //     if( ch == ')' && stack.pop() != '(') {
            //         return false;
            //     }
            // }
//方法2
// Your runtime beats 58.17 % of java submissions
// Your memory usage beats 75.27 % of java submissions (34.1 MB)
            if (ch == '(')
			stack.push(')');
		else if (ch == '{')
			stack.push('}');
		else if (ch == '[')
            stack.push(']');
            //  先判断是否为空，这里直接是将右边括号和栈顶元素相比较
		else if (stack.isEmpty() || stack.pop() != ch)
			return false;
           
        }
        return stack.empty();
    }
}
// @lc code=end



